---
name: deploy

on:
  push:
    branches:
      - main


jobs:
  vendor:
    name: vendor dependencies
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: vendor dependencies
        run: ./vendor-requirements.sh build
      - uses: actions/upload-artifact@v3
        with:
          name: python-vendored
          path: vendor/
          if-no-files-found: error
      - name: Create Issue if it fails ðŸ˜¢
        if: ${{ failure() }}
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          GITHUB_JOB: ${{ toJson(github)['job'] }}
          GITHUB_ATTEMPTS: ${{ github.run_attempt }}
          LAST_COMMIT: ${{ github.sha }}
          LAST_RUN_BY: ${{ github.actor }}
          RUN_ID: ${{ github.run_id }}
        with:
          filename: .github/deploy_failure.md
          assignees: ${{ github.actor }}
          update_existing: true

  create-cloudgov-services-staging:
    name: create services (staging)
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: create services
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: ./create-cloudgov-services.sh
          cf_org: gsa-datagov
          cf_space: staging
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}

  deploy-staging:
    concurrency: staging
    name: deploy (staging)
    environment: staging
    runs-on: ubuntu-latest
    needs:
      - vendor
      - create-cloudgov-services-staging
    env:
      APP_URL: https://inventory-stage-datagov.app.cloud.gov
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: python-vendored
      - name: deploy-inventory
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: >
            proxy=$(cf env inventory | grep https_proxy | cut -b14-);
            cf unset-env inventory https_proxy;
            cf push inventory --vars-file vars.staging.yml --strategy rolling;
            cf set-env inventory https_proxy $proxy;
            cf rs inventory
          cf_org: gsa-datagov
          cf_space: staging
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}
      - name: deploy-proxy
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: cf push inventory-proxy --vars-file vars.staging.yml --strategy rolling
          cf_org: gsa-datagov
          cf_space: staging
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}
      - name: smoke test
        run: bin/smoke.sh
      - name: Create Issue if it fails ðŸ˜¢
        if: ${{ failure() }}
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          GITHUB_JOB: ${{ toJson(github)['job'] }}
          GITHUB_ATTEMPTS: ${{ github.run_attempt }}
          LAST_COMMIT: ${{ github.sha }}
          LAST_RUN_BY: ${{ github.actor }}
          RUN_ID: ${{ github.run_id }}
        with:
          filename: .github/deploy_failure.md
          assignees: ${{ github.actor }}
          update_existing: true

  create-cloudgov-services-production:
    name: create services (production)
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: create services
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: ./create-cloudgov-services.sh
          cf_org: gsa-datagov
          cf_space: prod
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}

  deploy-production:
    concurrency: production
    name: deploy (production)
    environment: production
    runs-on: ubuntu-latest
    needs:
      - deploy-staging
      - create-cloudgov-services-production
    env:
      APP_URL: https://inventory.data.gov
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: python-vendored
      - name: deploy-inventory
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: >
            proxy=$(cf env inventory | grep https_proxy | cut -b14-);
            cf unset-env inventory https_proxy;
            cf push inventory --vars-file vars.production.yml --strategy rolling;
            cf set-env inventory https_proxy $proxy;
            cf rs inventory
          cf_org: gsa-datagov
          cf_space: prod
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}
      - name: deploy-proxy
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: cf push inventory-proxy --vars-file vars.production.yml --strategy rolling
          cf_org: gsa-datagov
          cf_space: prod
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}
      - name: smoke test
        run: bin/smoke.sh
      - name: Create Issue if it fails ðŸ˜¢
        if: ${{ failure() }}
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          GITHUB_JOB: ${{ toJson(github)['job'] }}
          GITHUB_ATTEMPTS: ${{ github.run_attempt }}
          LAST_COMMIT: ${{ github.sha }}
          LAST_RUN_BY: ${{ github.actor }}
          RUN_ID: ${{ github.run_id }}
        with:
          filename: .github/deploy_failure.md
          assignees: ${{ github.actor }}
          update_existing: true
