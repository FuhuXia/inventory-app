name: Reusable deploy template

on:
  workflow_call:
    inputs:
      environ:
        required: true
        type: string
      app_url:
        required: true
        type: string
    secrets:
      CF_SERVICE_USER:
        required: true
      CF_SERVICE_AUTH:
        required: true
      ADD_TO_PROJECT_PAT:
        required: true


jobs:
  create-cloudgov-services:
    name: create services ${{ inputs.environ }}
    environment: ${{ inputs.environ }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: create services
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: ./create-cloudgov-services.sh
          cf_org: gsa-datagov
          cf_space: ${{ inputs.environ }}
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}

  deploy:
    concurrency: ${{ inputs.environ }}
    name: deploy (${{ inputs.environ }})
    environment: ${{ inputs.environ }}
    runs-on: ubuntu-latest
    needs:
      - create-cloudgov-services
    env:
      APP_URL: ${{ inputs.app_url }}
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: python-vendored
      - name: deploy-inventory
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: cf push inventory --vars-file vars.${{ inputs.environ }}.yml --strategy rolling
          cf_org: gsa-datagov
          cf_space: ${{ inputs.environ }}
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}
      - name: deploy-proxy
        uses: cloud-gov/cg-cli-tools@main
        with:
          command: cf push inventory-proxy --vars-file vars.${{ inputs.environ }}.yml --strategy rolling
          cf_org: gsa-datagov
          cf_space: ${{ inputs.environ }}
          cf_username: ${{secrets.CF_SERVICE_USER}}
          cf_password: ${{secrets.CF_SERVICE_AUTH}}
      - name: smoke test
        run: bin/smoke.sh
      - name: Create Issue if it fails ðŸ˜¢
        if: ${{ failure() }}
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          GITHUB_JOB: ${{ toJson(github)['job'] }}
          GITHUB_ATTEMPTS: ${{ github.run_attempt }}
          LAST_COMMIT: ${{ github.sha }}
          LAST_RUN_BY: ${{ github.actor }}
          RUN_ID: ${{ github.run_id }}
        with:
          filename: .github/deploy_failure.md
          assignees: ${{ github.actor }}
          update_existing: true
